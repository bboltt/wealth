# train.py
import tensorflow as tf
import pandas as pd
import argparse
import os

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--epochs', type=int, default=10)
    parser.add_argument('--batch_size', type=int, default=32)
    parser.add_argument('--learning_rate', type=float, default=0.001)
    parser.add_argument('--model_dir', type=str)
    return parser.parse_known_args()

def load_data(data_path):
    df = pd.read_csv(data_path)
    X = df[['INT_A002', 'NUM_A003', 'NUM_A004']].values
    y = df['LABEL'].values
    return X, y

def create_model(input_shape):
    model = tf.keras.models.Sequential([
        tf.keras.layers.Dense(32, activation='relu', input_shape=input_shape),
        tf.keras.layers.Dense(16, activation='relu'),
        tf.keras.layers.Dense(1, activation='sigmoid')
    ])
    return model

def main():
    args, _ = parse_args()
    
    data_path = '/opt/ml/input/data/training/mini.csv'
    X, y = load_data(data_path)
    
    model = create_model((X.shape[1],))
    
    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=args.learning_rate),
                  loss='binary_crossentropy',
                  metrics=['accuracy'])
    
    model.fit(X, y, epochs=args.epochs, batch_size=args.batch_size)
    
    model.save(os.path.join(args.model_dir, 'model'))

if __name__ == '__main__':
    main()



# notebook
import sagemaker
from sagemaker.tensorflow import TensorFlow

s3_bucket = 'fraud-sagemaker-ds-data20240212202305186200000001'
s3_data_path = f's3://{s3_bucket}/bo_yi_tensorflow/data/mini.csv'

role = sagemaker.get_execution_role()
session = sagemaker.Session()

estimator = TensorFlow(entry_point='train.py',
                       role=role,
                       instance_count=1,
                       instance_type='ml.m5.large',
                       framework_version='2.4.1',
                       py_version='py39',
                       hyperparameters={
                           'epochs': 10,
                           'batch_size': 32,
                           'learning_rate': 0.001
                       })

# Start the training job
estimator.fit({'training': s3_data_path})




